name: Processo de validação de Feature Branch

on:
  push:
    branches:
      - feature/**

jobs:
  build-app:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Validação de commits
        uses: webiny/action-conventional-commits@v1.3.0
        with:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  Optional, for private repositories.
          allowed-commit-types: "feat,fix,chore" # Optional, set if you want a subset of commit types to be allowed.
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Node.js setup 
        id: nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Semantic release
        id: semantic-release
        run: | 
          VERSION=$(npx semantic-release --dry-run | grep "There is no previous release, the next release version is" | awk '{print $NF}')
          echo "NEXT_RELEASE_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          ls -la
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/app/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # - name: Build Maven Java App
      #   run: ./app/mvnw clean package -f ./app/pom.xml
      - name: Build with Maven
        run: mvn -B package --file ./app/pom.xml
      - name: Teste Coverage
        run: ./app/mvnw test jacoco:report --file ./app/pom.xml
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./app/target/site/jacoco/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true
      - name: Open PR
        id: check-open-prs
        uses: actions/github-script@v6
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            # Usar Base como parametro calculado
            script: |
                
                // Valida se tem algum PR Aberto para a branch release/x.x.x
                const { data: pullRequests } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: context.payload.ref,
                base: "main",
                state: 'open'
                });
                
                core.setOutput('open_prs', pullRequests.length > 0);

                
                let response = await github.rest.repos.getBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    branch: "main"
                });
                console.log('SHA1 Main', response.data.commit.sha)  

                try {
                  const pr_response = await github.rest.pulls.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `From: ${context.payload.ref} - version: ${{steps.semantic-release.outputs.NEXT_RELEASE_VERSION}}`,
                    head:  context.payload.ref,
                    base:  "main",
                    body: `Fill this with the description of the PR.`
                });
                } catch (error) {
                  console.info(error.status); 
                  if(error.status == 422 && error.response.data.message == 'Validation Failed') {
                    core.warning('Pull Request já existe')
                    console.info(error.response.data.errors);
                  } else {
                    console.info(error); 
                    core.setFailed(error.message);
                  }
                }


      - name: Testando Output
        run: |
          echo "Open PRs: ${{ steps.check-open-prs.outputs.open_prs }}"
          echo "Version: ${{ steps.semantic-release.outputs.NEXT_RELEASE_VERSION }}"
          

