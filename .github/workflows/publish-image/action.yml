name: 'Publish Image Docker'
description: 'Publish Image Docker ECR'
inputs:
  app_ecr_repository:
    description: 'ECR Repository'
    required: true
    default: '612872581837.dkr.ecr.us-east-1.amazonaws.com'
  iam_role:
    description: 'IAM Role'
    required: true
    default: 'arn:aws:iam::612872581837:role/gh-actions-role'
  aws_region:
    description: 'AWS Region'
    required: true
    default: 'us-east-1'
  app_ecr_name:
    description: 'App Name'
    required: true
  app_version:
    description: 'App Version'
    required: true
  docker_file:
    description: 'Docker File'
    required: true
    default: './infra/Dockerfile'
  is_release:
    description: 'Is Release'
    required: true
    default: 'true'
    


runs:
  using: "composite"

  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      with: 
        role-to-assume: ${{ inputs.iam_role }}
        aws-region: ${{ inputs.aws_region }}
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2
    - uses: actions/download-artifact@v4
      with:
        name: artifact-pkg
        path: .
    - name: Teste
      shell: bash
      run: |
        ls /tmp -la 
        ls -la
    - name: Build and Push Docker image
      if: ${{ inputs.is_release }} == 'false'
      shell: bash
      run: |
        env
        echo "${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA"
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ inputs.app_ecr_repository }}
        docker build -t ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA -f ${{inputs.docker_file}} .
        docker tag ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:${{inputs.app_version}}-snapshot
        docker push ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA
        docker push ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:${{inputs.app_version}}-snapshot
      env:
        AWS_REGION: ${{ inputs.aws_region }}
        IMAGE_TAG: $GITHUB_SHA
    - name: Build and Push Docker image
      shell: bash
      if: ${{ inputs.is_release }} == 'true'
      run: |
        echo "ECR - ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA"
        echo "ECR Version - ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:${{inputs.app_version}}"
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ inputs.app_ecr_repository }}
        docker build -t ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA -f ${{inputs.docker_file}} .
        docker tag ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:${{inputs.app_version}}
        docker push ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:$GITHUB_SHA
        docker push ${{inputs.app_ecr_repository}}/${{inputs.app_ecr_name}}:${{inputs.app_version}}
      env:
        AWS_REGION: ${{ inputs.aws_region }}
        IMAGE_TAG: $GITHUB_SHA
    - name: ChangeLog and Tag
      id: close-release
      if: ${{ inputs.is_release }} == 'true'
      shell: bash
      run: | 
        npm init -y 
        npm install @semantic-release/commit-analyzer @semantic-release/git @semantic-release/release-notes-generator @semantic-release/changelog
        npx semantic-release --extends ./.releaserc.json